# Generated from asteroidea.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,50,263,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,1,0,1,0,1,1,1,1,1,1,1,
        1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,
        5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,
        1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,
        1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,
        1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,
        1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,
        1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,
        1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,
        1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,4,45,227,8,45,
        11,45,12,45,228,1,46,1,46,5,46,233,8,46,10,46,12,46,236,9,46,1,46,
        1,46,1,47,1,47,5,47,242,8,47,10,47,12,47,245,9,47,1,48,1,48,1,48,
        1,48,1,49,1,49,1,49,1,49,5,49,255,8,49,10,49,12,49,258,9,49,1,49,
        1,49,1,49,1,49,2,234,256,0,50,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
        17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
        39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
        61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,
        83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,1,0,4,1,0,
        48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,
        10,12,13,32,32,266,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
        0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
        0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
        0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
        0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
        0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,
        0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,
        0,0,99,1,0,0,0,1,101,1,0,0,0,3,103,1,0,0,0,5,107,1,0,0,0,7,110,1,
        0,0,0,9,116,1,0,0,0,11,122,1,0,0,0,13,124,1,0,0,0,15,127,1,0,0,0,
        17,130,1,0,0,0,19,133,1,0,0,0,21,136,1,0,0,0,23,139,1,0,0,0,25,141,
        1,0,0,0,27,143,1,0,0,0,29,145,1,0,0,0,31,147,1,0,0,0,33,150,1,0,
        0,0,35,153,1,0,0,0,37,157,1,0,0,0,39,159,1,0,0,0,41,161,1,0,0,0,
        43,163,1,0,0,0,45,165,1,0,0,0,47,167,1,0,0,0,49,169,1,0,0,0,51,171,
        1,0,0,0,53,173,1,0,0,0,55,175,1,0,0,0,57,177,1,0,0,0,59,179,1,0,
        0,0,61,181,1,0,0,0,63,183,1,0,0,0,65,186,1,0,0,0,67,189,1,0,0,0,
        69,191,1,0,0,0,71,194,1,0,0,0,73,197,1,0,0,0,75,200,1,0,0,0,77,203,
        1,0,0,0,79,206,1,0,0,0,81,209,1,0,0,0,83,212,1,0,0,0,85,215,1,0,
        0,0,87,218,1,0,0,0,89,221,1,0,0,0,91,226,1,0,0,0,93,230,1,0,0,0,
        95,239,1,0,0,0,97,246,1,0,0,0,99,250,1,0,0,0,101,102,5,72,0,0,102,
        2,1,0,0,0,103,104,5,45,0,0,104,105,5,45,0,0,105,106,5,62,0,0,106,
        4,1,0,0,0,107,108,5,38,0,0,108,109,5,38,0,0,109,6,1,0,0,0,110,111,
        5,91,0,0,111,112,5,61,0,0,112,113,5,61,0,0,113,114,5,61,0,0,114,
        115,5,93,0,0,115,8,1,0,0,0,116,117,5,91,0,0,117,118,5,37,0,0,118,
        119,5,37,0,0,119,120,5,37,0,0,120,121,5,93,0,0,121,10,1,0,0,0,122,
        123,5,35,0,0,123,12,1,0,0,0,124,125,5,35,0,0,125,126,5,35,0,0,126,
        14,1,0,0,0,127,128,5,35,0,0,128,129,5,102,0,0,129,16,1,0,0,0,130,
        131,5,58,0,0,131,132,5,61,0,0,132,18,1,0,0,0,133,134,5,43,0,0,134,
        135,5,61,0,0,135,20,1,0,0,0,136,137,5,45,0,0,137,138,5,61,0,0,138,
        22,1,0,0,0,139,140,5,91,0,0,140,24,1,0,0,0,141,142,5,45,0,0,142,
        26,1,0,0,0,143,144,5,93,0,0,144,28,1,0,0,0,145,146,5,63,0,0,146,
        30,1,0,0,0,147,148,5,33,0,0,148,149,5,63,0,0,149,32,1,0,0,0,150,
        151,5,63,0,0,151,152,5,63,0,0,152,34,1,0,0,0,153,154,5,33,0,0,154,
        155,5,63,0,0,155,156,5,63,0,0,156,36,1,0,0,0,157,158,5,38,0,0,158,
        38,1,0,0,0,159,160,5,42,0,0,160,40,1,0,0,0,161,162,5,40,0,0,162,
        42,1,0,0,0,163,164,5,41,0,0,164,44,1,0,0,0,165,166,5,64,0,0,166,
        46,1,0,0,0,167,168,5,94,0,0,168,48,1,0,0,0,169,170,5,43,0,0,170,
        50,1,0,0,0,171,172,5,126,0,0,172,52,1,0,0,0,173,174,5,36,0,0,174,
        54,1,0,0,0,175,176,5,60,0,0,176,56,1,0,0,0,177,178,5,44,0,0,178,
        58,1,0,0,0,179,180,5,62,0,0,180,60,1,0,0,0,181,182,5,124,0,0,182,
        62,1,0,0,0,183,184,5,43,0,0,184,185,5,43,0,0,185,64,1,0,0,0,186,
        187,5,45,0,0,187,188,5,45,0,0,188,66,1,0,0,0,189,190,5,39,0,0,190,
        68,1,0,0,0,191,192,5,94,0,0,192,193,5,94,0,0,193,70,1,0,0,0,194,
        195,5,60,0,0,195,196,5,45,0,0,196,72,1,0,0,0,197,198,5,45,0,0,198,
        199,5,62,0,0,199,74,1,0,0,0,200,201,5,60,0,0,201,202,5,60,0,0,202,
        76,1,0,0,0,203,204,5,62,0,0,204,205,5,62,0,0,205,78,1,0,0,0,206,
        207,5,61,0,0,207,208,5,62,0,0,208,80,1,0,0,0,209,210,5,60,0,0,210,
        211,5,61,0,0,211,82,1,0,0,0,212,213,5,60,0,0,213,214,5,62,0,0,214,
        84,1,0,0,0,215,216,5,37,0,0,216,217,5,62,0,0,217,86,1,0,0,0,218,
        219,5,60,0,0,219,220,5,37,0,0,220,88,1,0,0,0,221,222,5,60,0,0,222,
        223,5,37,0,0,223,224,5,62,0,0,224,90,1,0,0,0,225,227,7,0,0,0,226,
        225,1,0,0,0,227,228,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,
        92,1,0,0,0,230,234,5,34,0,0,231,233,9,0,0,0,232,231,1,0,0,0,233,
        236,1,0,0,0,234,235,1,0,0,0,234,232,1,0,0,0,235,237,1,0,0,0,236,
        234,1,0,0,0,237,238,5,34,0,0,238,94,1,0,0,0,239,243,7,1,0,0,240,
        242,7,2,0,0,241,240,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,0,243,
        244,1,0,0,0,244,96,1,0,0,0,245,243,1,0,0,0,246,247,7,3,0,0,247,248,
        1,0,0,0,248,249,6,48,0,0,249,98,1,0,0,0,250,251,5,47,0,0,251,252,
        5,47,0,0,252,256,1,0,0,0,253,255,9,0,0,0,254,253,1,0,0,0,255,258,
        1,0,0,0,256,257,1,0,0,0,256,254,1,0,0,0,257,259,1,0,0,0,258,256,
        1,0,0,0,259,260,5,10,0,0,260,261,1,0,0,0,261,262,6,49,0,0,262,100,
        1,0,0,0,5,0,228,234,243,256,1,6,0,0
    ]

class asteroideaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    MOVE_LEFT_OP = 36
    MOVE_RIGHT_OP = 37
    MOVE_START_OP = 38
    MOVE_END_OP = 39
    READ_CHAR_OP = 40
    PRINT_CHAR_OP = 41
    PRINT_MOVE_CHAR_OP = 42
    READ_INT_OP = 43
    PRINT_INT_OP = 44
    PRINT_MOVE_INT_OP = 45
    NUM = 46
    STRING = 47
    IDENTIFIER = 48
    WS = 49
    COMMENT = 50

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'H'", "'-->'", "'&&'", "'[===]'", "'[%%%]'", "'#'", "'##'", 
            "'#f'", "':='", "'+='", "'-='", "'['", "'-'", "']'", "'?'", 
            "'!?'", "'??'", "'!??'", "'&'", "'*'", "'('", "')'", "'@'", 
            "'^'", "'+'", "'~'", "'$'", "'<'", "','", "'>'", "'|'", "'++'", 
            "'--'", "'''", "'^^'", "'<-'", "'->'", "'<<'", "'>>'", "'=>'", 
            "'<='", "'<>'", "'%>'", "'<%'", "'<%>'" ]

    symbolicNames = [ "<INVALID>",
            "MOVE_LEFT_OP", "MOVE_RIGHT_OP", "MOVE_START_OP", "MOVE_END_OP", 
            "READ_CHAR_OP", "PRINT_CHAR_OP", "PRINT_MOVE_CHAR_OP", "READ_INT_OP", 
            "PRINT_INT_OP", "PRINT_MOVE_INT_OP", "NUM", "STRING", "IDENTIFIER", 
            "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "MOVE_LEFT_OP", "MOVE_RIGHT_OP", 
                  "MOVE_START_OP", "MOVE_END_OP", "READ_CHAR_OP", "PRINT_CHAR_OP", 
                  "PRINT_MOVE_CHAR_OP", "READ_INT_OP", "PRINT_INT_OP", "PRINT_MOVE_INT_OP", 
                  "NUM", "STRING", "IDENTIFIER", "WS", "COMMENT" ]

    grammarFileName = "asteroidea.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


